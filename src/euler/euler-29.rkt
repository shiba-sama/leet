#lang racket

(require (rename-in racket/base [define fn]))
(require (rename-in racket/base [define def]))

;; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;; Project Euler
;; Problem 29

; How many distinct terms are generated by a**b where (a, b) ∈ (range 2 101)?

; Translates every (base, exponent) pair into a unique number which preserves
; the ordering of their powers: log(b^e) = e * log(base).
(fn (log-id base exponent)
    (* exponent (log base)))

;; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;; Solve

(for*/fold ([e-uniques (set)] [l-uniques (set)] 
            #:result (list (set-count e-uniques) (set-count l-uniques)))
           ([base (in-range 2 101)] [exp (in-range 2 101)])
           (values (set-add e-uniques (expt   base exp))   ;; correct answer
                   (set-add l-uniques (log-id base exp)))) ;; logs are imprecise for identity
